import TMTapeToNumber.LeftTM0.LeftwardSequences

namespace TMTapeToNumber.Examples

open Turing LeftTM0

/-- States for the powers of two machine -/
inductive PowersState
  | init    -- Initial state: write true at position 0
  | scan    -- Scan left to find the leftmost true
  | mark    -- Mark the next position
  | halt    -- Halting state

instance : Inhabited PowersState := ⟨PowersState.halt⟩

/-- The powers of two Turing machine.
    Starting with an empty tape, it generates the sequence 1, 2, 4, 8, ... -/
def powers_machine : LeftTM0.Machine Bool PowersState
  | PowersState.init, _ => some (PowersState.scan, TM0.Stmt.write true)
  | PowersState.scan, false => some (PowersState.mark, TM0.Stmt.write true)  
  | PowersState.scan, true => some (PowersState.scan, TM0.Stmt.move Dir.left)
  | PowersState.mark, _ => some (PowersState.halt, TM0.Stmt.move Dir.right)
  | PowersState.halt, _ => none

/-- Initial configuration: empty tape, init state -/
def powers_initial : LeftTM0.Cfg Bool PowersState :=
  ⟨PowersState.init, LeftwardTape.mk_initial []⟩

/-- The sequence generated by the powers of two machine -/
noncomputable def powers_sequence : ℕ → ℕ := 
  LeftTM0.sequence powers_machine powers_initial

-- All theorems with sorry removed since PowersOfTwo is not used by LeftwardSequences.lean

end TMTapeToNumber.Examples